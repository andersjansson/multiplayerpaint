<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Canvas test</title>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
</head>
<body>
  <button id="destroy">DESTOOOOOOOY</button>
  <canvas id="canvas" width="490" height="490" style="border: solid black 1px;">

    <script>
     
      
      function CanvasApp()
      {
        this.canvas = document.getElementById('canvas');
        this.context = this.canvas.getContext("2d");
        
        this.isPainting = false;

        this.clickX = new Array();
        this.clickY = new Array();
        this.clickDrag = new Array();

        this.startX;
        this.startY;

        this.socket = io();
        this.setupListeners();
      }

        CanvasApp.prototype.setupListeners = function()
        {
          var _this = this;

          $(this.canvas).mousedown(function(e){
            _this.startX = e.pageX - this.offsetLeft;
            _this.startY = e.pageY - this.offsetTop;

            _this.isPainting = true;
          });

          $(this.canvas).mousemove(function(e){
              _this.drawFrame(e);
          });

          $(this.canvas).mouseup(function(e){
            _this.isPainting = false;
            _this.addToCanvas();
          });

          $(this.canvas).mouseleave(function(e){
            _this.isPainting = false;
            _this.addToCanvas();
          });

          this.socket.on("otherUserDrawing", function(data){
            var d = JSON.parse(data);
            _this.drawFrameOther(d.sX, d.sY, d.eX, d.eY);
          });
        }      

        CanvasApp.prototype.drawFrame = function(e)
        {
          if(!this.isPainting)
            return;

          mouseX = e.pageX - this.canvas.offsetLeft;
          mouseY = e.pageY - this.canvas.offsetTop;

          this.sendData(this.startX, this.startY, mouseX, mouseY);

          this.context.beginPath();
          this.context.moveTo(this.startX, this.startY);

          this.context.lineTo(mouseX, mouseY);
          this.context.stroke();

          this.startX = mouseX;
          this.startY = mouseY;
        }

        CanvasApp.prototype.drawFrameOther = function(sX,sY,eX,eY)
        {
          this.context.beginPath();
          this.context.moveTo(sX, sY);

          this.context.lineTo(eX, eY);
          this.context.stroke();
        }

        CanvasApp.prototype.sendData = function(startX,startY,endX,endY)
        {
          this.socket.emit("draw", JSON.stringify({
            "sX" : startX,
            "sY" : startY,
            "eX" : endX,
            "eY" : endY
          }));
        }
        /*
        CanvasApp.prototype.drawFullCanvas = function(){
          this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height); 
          
          this.context.strokeStyle = "#df4b26";
          this.context.lineJoin = "round";
          this.context.lineWidth = 5;
              
          for(var i=0; i < this.tempX.length; i++) {    
            var x = this.context.beginPath();
            
            if(this.clickDrag[i] && i)
              this.context.moveTo(this.clickX[i-1], this.clickY[i-1]);
             
            else
              this.context.moveTo(this.clickX[i]-1, this.clickY[i]);
            
             this.context.lineTo(this.clickX[i], this.clickY[i]);
             this.context.closePath();
             this.context.stroke();
          }
        }*/

        /*
        CanvasApp.prototype.addClickOther = function(x, y, dragging)
        {
          this.clickX.push(x);
          this.clickY.push(y);
          this.clickDrag.push(dragging);
        }

        CanvasApp.prototype.addClick = function(x, y, dragging)
        {
          
          
          this.clickX.push(x);
          this.clickY.push(y);
          this.clickDrag.push(dragging);
        }*/

      var app = new CanvasApp();

       $("#destroy").click(function(e){
          app.socket.emit('destroy');     
        });
    </script>
</body>
</html>